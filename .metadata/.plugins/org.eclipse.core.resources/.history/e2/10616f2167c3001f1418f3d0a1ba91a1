package main;

import java.util.ArrayList;
import java.util.List;
import model.Alojamiento;
import model.DiaDeSol;
import model.Habitacion;
import model.Reserva;

import java.text.Normalizer;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;


public class BookingApp {
	private List<Alojamiento> alojamientos;
	private List<Reserva> reservas;

	public BookingApp() {
		this.alojamientos = new ArrayList<>();
		this.reservas = new ArrayList<>();  // Asegúrate de inicializar esta lista
	}

	public void agregarAlojamiento(Alojamiento alojamiento) {
		this.alojamientos.add(alojamiento);
	}

	public void buscarAlojamientos(String ciudad, String tipo, LocalDate fechaInicio, LocalDate fechaFin, int cantidadAdultos, int cantidadNiños, int cantidadHabitaciones) {
		System.out.println("\n--- Resultados de búsqueda para: " + tipo + " en " + ciudad + " ---");
		boolean encontrado = false;

		if (tipo.equalsIgnoreCase("Día de Sol")) {
			int totalPersonas = cantidadAdultos + cantidadNiños;

			for (Alojamiento a : alojamientos) {
				if (a.getCiudad().equalsIgnoreCase(ciudad) && a instanceof DiaDeSol) {
					DiaDeSol diaDeSol = (DiaDeSol) a;

					// Mostrar actividades y costos
					System.out.println("Nombre: " + diaDeSol.getNombre());
					System.out.println("Calificación: " + diaDeSol.getCalificacion() + " estrellas");
					System.out.println("Actividades: " + String.join(", ", diaDeSol.getActividades()));
					System.out.println("Incluye Almuerzo: " + (diaDeSol.isIncluyeAlmuerzo() ? "Sí" : "No"));
					System.out.println("Incluye Refrigerio: " + (diaDeSol.isIncluyeRefrigerio() ? "Sí" : "No"));
					System.out.println("Precio por persona: " + diaDeSol.getPrecioDia());
					System.out.println("Costo total para " + totalPersonas + " personas: " + (diaDeSol.getPrecioDia() * totalPersonas));
					encontrado = true;
				}
			}
		} else {
			long diasEstadia = ChronoUnit.DAYS.between(fechaInicio, fechaFin) + 1;

			for (Alojamiento a : alojamientos) {
				if (a.getCiudad().equalsIgnoreCase(ciudad) && a.getTipo().equalsIgnoreCase(tipo)) {
					boolean tieneCapacidad = verificarCapacidad(a, cantidadAdultos, cantidadNiños, cantidadHabitaciones);
					if (!tieneCapacidad) continue;

					double precioBase = obtenerPrecioHabitacionMasSimple(a) * cantidadHabitaciones * diasEstadia;
					double precioFinal = aplicarDescuentosYAumentos(precioBase, fechaInicio, fechaFin);
					double ajuste = precioFinal - precioBase;

					System.out.println("Nombre: " + a.getNombre());
					System.out.println("Calificación: " + a.getCalificacion());
					System.out.println("Precio por noche: " + obtenerPrecioHabitacionMasSimple(a));
					System.out.println("Precio total (sin ajustes): " + precioBase);
					System.out.println((ajuste >= 0 ? "Aumento aplicado: " : "Descuento aplicado: ") + Math.abs(ajuste));
					System.out.println("Precio total (con ajustes): " + precioFinal);
					encontrado = true;
				}
			}
		}

		if (!encontrado) {
			System.out.println("No se encontraron alojamientos que cumplan con los criterios.");
		}
	}



	private boolean verificarCapacidad(Alojamiento alojamiento, int cantidadAdultos, int cantidadNiños, int cantidadHabitaciones) {
		int totalPersonas = cantidadAdultos + cantidadNiños;

		// Obtener todas las habitaciones disponibles
		List<Habitacion> habitaciones = alojamiento.getHabitaciones();

		// Validar que hay suficientes habitaciones para la cantidad solicitada
		if (habitaciones.size() < cantidadHabitaciones) {
			return false; // No hay suficientes habitaciones disponibles
		}

		// Generar todas las combinaciones posibles de habitaciones de tamaño "cantidadHabitaciones"
		List<List<Habitacion>> combinaciones = generarCombinaciones(habitaciones, cantidadHabitaciones);

		// Verificar si alguna combinación cumple con la capacidad requerida
		for (List<Habitacion> combinacion : combinaciones) {
			int capacidadTotal = combinacion.stream().mapToInt(Habitacion::getCapacidad).sum();
			if (capacidadTotal >= totalPersonas) {
				return true; // Hay una combinación válida
			}
		}

		return false; // No se encontró una combinación que cumpla
	}

	private List<List<Habitacion>> generarCombinaciones(List<Habitacion> habitaciones, int cantidad) {
		List<List<Habitacion>> resultado = new ArrayList<>();
		generarCombinacionesRecursivo(habitaciones, new ArrayList<>(), 0, cantidad, resultado);
		return resultado;
	}

	private void generarCombinacionesRecursivo(List<Habitacion> habitaciones, List<Habitacion> combinacionActual, 
			int indice, int cantidad, List<List<Habitacion>> resultado) {
		if (combinacionActual.size() == cantidad) {
			resultado.add(new ArrayList<>(combinacionActual)); // Agregar combinación válida
			return;
		}

		for (int i = indice; i < habitaciones.size(); i++) {
			combinacionActual.add(habitaciones.get(i));
			generarCombinacionesRecursivo(habitaciones, combinacionActual, i + 1, cantidad, resultado);
			combinacionActual.remove(combinacionActual.size() - 1); // Retroceder
		}
	}



	private double obtenerPrecioHabitacionMasSimple(Alojamiento alojamiento) {
		return alojamiento.getHabitaciones().stream()
				.mapToDouble(Habitacion::getPrecio)
				.min()
				.orElse(0);
	}

	private double aplicarDescuentosYAumentos(double precioBase, LocalDate fechaInicio, LocalDate fechaFin) {
		if (fechaFin.getDayOfMonth() >= 25) {
			return precioBase * 1.15;
		} else if (fechaInicio.getDayOfMonth() >= 10 && fechaFin.getDayOfMonth() <= 15) {
			return precioBase * 1.10;
		} else if (fechaInicio.getDayOfMonth() >= 5 && fechaFin.getDayOfMonth() <= 10) {
			return precioBase * 0.92;
		}
		return precioBase;
	}

	public void confirmarHabitaciones(String nombreHotel, LocalDate fechaInicio, LocalDate fechaFin, int cantidadAdultos, int cantidadNiños, int cantidadHabitaciones) {
		System.out.println("\n--- Confirmar habitaciones para: " + nombreHotel + " ---");

		// Buscar el alojamiento por nombre
		Alojamiento alojamiento = alojamientos.stream()
				.filter(a -> eliminarTildes(a.getNombre()).equalsIgnoreCase(eliminarTildes(nombreHotel)))
				.findFirst()
				.orElse(null);


		if (alojamiento == null) {
			System.out.println("No se encontró un hotel con el nombre indicado.");
			return;
		}

		// Total de personas que se alojarán
		int totalPersonas = cantidadAdultos + cantidadNiños;

		// Verificar habitaciones disponibles
		boolean disponibilidad = false;

		for (Habitacion habitacion : alojamiento.getHabitaciones()) {
			if (habitacion.getCapacidad() >= totalPersonas && !estaReservada(habitacion, fechaInicio, fechaFin)) {
				// Mostrar detalles de la habitación
				System.out.println("\nTipo de habitación: " + habitacion.getTipo());
				System.out.println("Características: " + habitacion.getCaracteristicas());
				System.out.println("Capacidad: " + habitacion.getCapacidad() + " personas");
				System.out.println("Precio por noche: " + habitacion.getPrecio());
				disponibilidad = true;
			}
		}

		if (!disponibilidad) {
			System.out.println("No hay habitaciones disponibles para las fechas indicadas.");
		}
	}

	public static String eliminarTildes(String texto) {
		String normalized = Normalizer.normalize(texto, Normalizer.Form.NFD);
		return normalized.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "");
	}

	// Verificar si una habitación está reservada en las fechas indicadas
	private boolean estaReservada(Habitacion habitacion, LocalDate fechaInicio, LocalDate fechaFin) {
		// Iterar sobre las reservas para verificar conflictos de fechas
		for (Reserva reserva : habitacion.getReservas()) {
			if (!(fechaFin.isBefore(reserva.getFechaInicio()) || fechaInicio.isAfter(reserva.getFechaFin()))) {
				// Hay un conflicto de fechas con esta reserva
				return true;
			}
		}
		return false; // No hay conflictos
	}



	public void reservar(String nombreHotel, LocalDate fechaInicio, LocalDate fechaFin, String tipoHabitacion,
			int cantidadHabitaciones, String nombre, String apellido, String email, String nacionalidad, String telefono, String horaLlegada) {
		// Buscar el alojamiento
		Alojamiento alojamiento = alojamientos.stream()
				.filter(a -> a.getNombre().equalsIgnoreCase(nombreHotel))
				.findFirst()
				.orElse(null);

		if (alojamiento == null) {
			System.out.println("No se encontró el hotel indicado.");
			return;
		}

		// Filtrar habitaciones disponibles del tipo solicitado
		List<Habitacion> habitacionesDisponibles = alojamiento.getHabitaciones().stream()
				.filter(h -> h.getTipo().equalsIgnoreCase(tipoHabitacion) && h.estaDisponible(fechaInicio, fechaFin))
				.limit(cantidadHabitaciones) // Seleccionar solo las necesarias
				.toList();

		if (habitacionesDisponibles.size() < cantidadHabitaciones) {
			System.out.println("No hay suficientes habitaciones disponibles para las fechas indicadas.");
			return;
		}

		// Crear la reserva
		Reserva nuevaReserva = new Reserva(nombre, apellido, email, nacionalidad, telefono, fechaInicio, fechaFin, tipoHabitacion, cantidadHabitaciones, horaLlegada);

		// Vincular las habitaciones disponibles con la reserva
		for (Habitacion habitacion : habitacionesDisponibles) {
			habitacion.agregarReserva(nuevaReserva);
		}

		// Registrar la reserva en la lista global
		reservas.add(nuevaReserva);

		System.out.println("Se ha realizado la reserva con éxito.");
	}
	
	public boolean confirmarDisponibilidad(String nombreHotel, LocalDate fechaInicio, LocalDate fechaFin, String tipoHabitacion, int cantidadHabitaciones) {
	    Alojamiento alojamiento = alojamientos.stream()
	            .filter(a -> a.getNombre().equalsIgnoreCase(nombreHotel))
	            .findFirst()
	            .orElse(null);

	    if (alojamiento == null) {
	        System.out.println("No se encontró el hotel indicado.");
	        return false;
	    }

	    // Filtrar habitaciones disponibles del tipo solicitado
	    List<Habitacion> habitacionesDisponibles = alojamiento.getHabitaciones().stream()
	            .filter(h -> h.getTipo().equalsIgnoreCase(tipoHabitacion) && h.estaDisponible(fechaInicio, fechaFin))
	            .toList();

	    if (habitacionesDisponibles.size() >= cantidadHabitaciones) {
	        System.out.println("Hay disponibilidad para " + cantidadHabitaciones + " habitaciones de tipo " + tipoHabitacion + ".");
	        return true;
	    } else {
	        System.out.println("No hay suficientes habitaciones disponibles para las fechas indicadas.");
	        return false;
	    }
	}




	public boolean verificarDisponibilidad(String tipoHabitacion, LocalDate fechaInicio, LocalDate fechaFin, int cantidadSolicitada) {
		int habitacionesOcupadas = 0;

		// Verificar cuántas habitaciones están ocupadas para el tipo solicitado
		for (Reserva reserva : reservas) {
			if (reserva.getTipoHabitacion().equalsIgnoreCase(tipoHabitacion) &&
					!(fechaFin.isBefore(reserva.getFechaInicio()) || fechaInicio.isAfter(reserva.getFechaFin()))) {
				habitacionesOcupadas += reserva.getCantidadHabitaciones();
			}
		}

		// Buscar habitaciones disponibles en el alojamiento
		for (Alojamiento alojamiento : alojamientos) {
			// Filtrar habitaciones del tipo solicitado en el alojamiento
			long habitacionesDisponibles = alojamiento.getHabitaciones().stream()
					.filter(h -> h.getTipo().equalsIgnoreCase(tipoHabitacion))
					.count(); // Contamos las habitaciones de ese tipo

			// Si hay suficientes habitaciones disponibles
			if ((habitacionesDisponibles - habitacionesOcupadas) >= cantidadSolicitada) {
				return true; // Hay disponibilidad
			}
		}

		// Si no hay suficientes habitaciones disponibles
		return false;
	}

}

